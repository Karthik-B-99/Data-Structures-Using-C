5. Linked List Operations

#include<stdio.h>
#include<stdlib.h>
void create();
void display();
void insert_pos();
void delete_pos();
struct node{
  int info;
  struct node *next;
};
struct node *start=NULL;
int main()
{
  int choice;
  do
  {
    printf("1.Create\n");
    printf("2.Display\n");
    printf("3.Insert at position\n");
    printf("4.Delete at position\n");
    printf("5.Exit\n");
    printf("Enter your choice\n");
    scanf("%d",&choice);
    switch(choice)
    {
      case 1: create();
      break;
      case 2: display();
      break;
      case 3: insert_pos();
      break;
      case 4: delete_pos();
      break;
      case 5: exit(0);
      break;
      default: printf("Invalid Choice!");
      break;
    }
  }
  while(choice!=5);
  return 0;
}
void create()
{
  struct node *temp,*ptr;
  temp=(struct node*)malloc(sizeof(struct node));
  if(temp==NULL)
  {
    printf("Memory not available\n");
    exit(0);
  }
 printf("Enter the data value for the node\n");
 scanf("%d",&temp->info);
 temp->next=NULL;
 if(start==NULL)
 {
   start=temp;
 }
 else
 {
   ptr=start;
   while(ptr->next!=NULL)
   {
     ptr=ptr->next;
   }
   ptr->next=temp;
 }
}
void display()
{
  struct node *ptr;
  if(start==NULL)
  {
    printf("The list is empty\n");
    return;
  }
  else
  {
    ptr=start;
    printf("The list elements are\n");
    while(ptr!=NULL)
    {
      printf("%d\n",ptr->info);
      ptr=ptr->next;
    }
  }
}
void insert_pos()
{
  struct node *ptr,*temp;
  int i,pos;
  temp=(struct node*)malloc(sizeof(struct node));
  if(temp==NULL)
  {
    printf("Memory not available\n");
    return;
  }
  else
  printf("Enter the position for the new node to be inserted\n");
  scanf("%d",&pos);
  printf("Enter the data value for the node\n");
  scanf("%d",&temp->info);
  temp->next=NULL;
  if(pos==0)
  {
    temp->next=start;
    start=temp;
  }
  else
  {
    ptr=start;
    for(i=0;i<pos-1;i++)
    ptr=ptr->next;
    if(ptr==NULL)
    {
      printf("Position not found\n");
      return;
    }
    temp->next=ptr->next;
    ptr->next=temp;
  }
}
void delete_pos()
{
  struct node*temp,*ptr;
  int i,pos;
  if(start==NULL)
  {
    printf("The list is empty\n");
    exit(0);
  }
  else
{
  printf("Enter the position of the node to be deleted\n");
  scanf("%d",&pos);
  if(pos==0)
  {
    ptr=start;
    start=start->next;
     printf("The deleted element is %d",ptr->info);
    free(ptr);
  }
  else
  {
    ptr=start;
    for(i=0;i<pos;i++)
   
    {
      temp=ptr;
      ptr=ptr->next;
      if(ptr==NULL)
      {
        printf("Position not found\n");
        return;
      }
}
      temp->next=ptr->next;
      printf("The deleted element is %d",ptr->info);
      free(ptr);
    }
  }
}
