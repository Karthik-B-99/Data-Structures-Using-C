8. QUEUE USING LINKED LIST

#include<stdio.h>
#include<stdlib.h>
void enqueue();
void dequeue();
void isempty();
void isfull();
void display();
struct node
{
  int info;
  struct node *link;
};
typedef struct node *NODE;
NODE front=NULL;
NODE rear=NULL;
int c=0,size=5;
NODE getnode()
{
  NODE x;
  x=(NODE)malloc(sizeof(struct node));
  if(x==NULL)
  {
    printf("Memory not available\n");
    exit(0);
  }
  return x;
}
int main()
{
  int choice;
  printf(" 1.Enqueue\n 2.Dequeue\n 3.IsEmpty\n 4.IsFUll\n 5.Display\n 6.Exit\n");
  while(1)
  {
    printf("Enter your choice\n");
    scanf("%d",&choice);
    switch(choice)
    {
      case 1: enqueue();
      break;
      case 2: dequeue();
      break;
      case 3: isempty();
      break;
      case 4: isfull();
      break;
      case 5: display();
      break;
      case 6: exit(0);
      break;
    }
  }
  return 0;
}
void enqueue()
{
  int item;
  if(c==size)
  {
    printf("Qeueue Overflow\n");
  }
  else
  {
  printf("Enter the element to be inserted\n");
  scanf("%d",&item);
  NODE temp=getnode();
  temp->info=item;
  if(rear==NULL)
  {
    front=temp;
    rear=temp;
    temp->link=NULL;
  }
  else
  {
    rear->link=temp;
    rear=temp;
    temp->link=NULL;
  }
  c++;
}
}
void dequeue()
{
  if(front==NULL)
  {
    printf("Queue Underflow\n");
  }
  else
  {
    NODE temp=front;
    if(front==rear)
    {
      front=NULL;
      rear=NULL;
    }
else
{
  front=front->link;
}
c--;
printf("The deleted element is %d\n",temp->info);
free(temp);
  }
}
void isempty()
{
  if(front==NULL)
  {
    printf("Queue is empty\n");
  }
  else
  printf("Queue is not empty\n");
}
void isfull()
{
  if(c==size)
  {
    printf("Queue is full\n");
  }
  else
  printf("Queue is not full\n");
}
void display()
{
  NODE ptr;
  if(front==NULL)
  {
    printf("Queue Underflow\n");
  }
  else
  {
    ptr=front;
    printf("The queue elements are\n");
    while(ptr!=NULL)
    {
      printf("%d\n",ptr->info);
      ptr=ptr->link;
    }
  }
}