10. STACK LIST

#include<stdio.h>
#include<stdlib.h>
void push();
void pop();
void peek();
void isempty();
void isfull();
void display();
struct node
{
  int info;
  struct node*link;
};
typedef struct node*NODE;
NODE top=NULL;
int c=0,size=5;
NODE getnode()
{
  NODE x;
  x=(struct node*)malloc(sizeof(struct node));
  if(x==NULL)
  {
    printf("Memory not available\n");
    exit(0);
  }
  return x;
  return 0;
}
int main()
{
  int ch;
  printf("\n 1.Push\n 2.Pop\n 3.Peek\n 4.IsEmpty\n 5.IsFull\n 6.Display\n 7.Exit\n");
  while(1)
  {
  printf("Enter your choice\n");
  scanf("%d",&ch);
  switch(ch)
  {
    case 1: push();
    break;
    case 2: pop();
    break;
     case 3: peek();
     break;
     case 4: isempty();
     break;
     case 5: isfull();
     break;
     case 6: display();
     break;
     case 7: exit(0);
     break;
     default: printf("Invalid Choice!");
     break;
  }
}
return 0;
}
void push()
{
  int item;
  if(c==size)
  {
    printf("Stack Overflow\n");
  }
  else{
    NODE temp=getnode();
    printf("Enter the element to be inserted\n");
    scanf("%d",&item);
    temp->info=item;
    temp->link=top;
    top=temp;
    c++;
  }
}
void pop()
{
  int item;
  if(top==NULL)
  {
    printf("Stack Underflow\n");
  }
  else
  {
    NODE temp=getnode();
    temp=top;
    printf("The deleted element is %d\n",temp->info);
    top=top->link;
    free(temp);
    c--;
  }
}
void peek()
{
  if(top==NULL)
  {
    printf("Stack Underflow\n");
  }
  else
  printf("The topmost element of the stack is %d\n",top->info);
}
void isempty()
{
  if(top==NULL)
  {
    printf("Stack is empty\n");
  }
  else
  printf("Stack is not empty\n");
}
void isfull()
{
  if(c==size)
  {
    printf("Stack is full\n");
  }
  else
  printf("Stack is not full\n");
}
void display()
{
  if(top==NULL)
  {
    printf("Stack Underflow\n");
  }
  else
  {
    NODE ptr;
  ptr=top;
  printf("The stack elements are\n");
  while(ptr!=NULL)
  {
  printf("%d\n",ptr->info);
  ptr=ptr->link;

  }
}
}